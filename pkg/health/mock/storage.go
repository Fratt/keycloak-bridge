// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/health (interfaces: StoreModule)

// Package mock is a generated GoMock package.
package mock

import (
	json "encoding/json"
	health "github.com/cloudtrust/keycloak-bridge/pkg/health"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// StoreModule is a mock of StoreModule interface
type StoreModule struct {
	ctrl     *gomock.Controller
	recorder *StoreModuleMockRecorder
}

// StoreModuleMockRecorder is the mock recorder for StoreModule
type StoreModuleMockRecorder struct {
	mock *StoreModule
}

// NewStoreModule creates a new mock instance
func NewStoreModule(ctrl *gomock.Controller) *StoreModule {
	mock := &StoreModule{ctrl: ctrl}
	mock.recorder = &StoreModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *StoreModule) EXPECT() *StoreModuleMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *StoreModule) Read(arg0 string) (health.StoredReport, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(health.StoredReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *StoreModuleMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*StoreModule)(nil).Read), arg0)
}

// Update mocks base method
func (m *StoreModule) Update(arg0 string, arg1 time.Duration, arg2 json.RawMessage) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *StoreModuleMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*StoreModule)(nil).Update), arg0, arg1, arg2)
}
