// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-healthcheck (interfaces: RedisHealthChecker)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	common_healthcheck "github.com/cloudtrust/common-healthcheck"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// RedisHealthChecker is a mock of RedisHealthChecker interface
type RedisHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *RedisHealthCheckerMockRecorder
}

// RedisHealthCheckerMockRecorder is the mock recorder for RedisHealthChecker
type RedisHealthCheckerMockRecorder struct {
	mock *RedisHealthChecker
}

// NewRedisHealthChecker creates a new mock instance
func NewRedisHealthChecker(ctrl *gomock.Controller) *RedisHealthChecker {
	mock := &RedisHealthChecker{ctrl: ctrl}
	mock.recorder = &RedisHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *RedisHealthChecker) EXPECT() *RedisHealthCheckerMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *RedisHealthChecker) HealthChecks(arg0 context.Context) []common_healthcheck.RedisReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]common_healthcheck.RedisReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *RedisHealthCheckerMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*RedisHealthChecker)(nil).HealthChecks), arg0)
}
